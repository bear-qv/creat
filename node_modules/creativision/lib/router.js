var path = require('path');

//路由控制器  //所有涉及到RUNTIME的是运行时态可以先定义再在配置中赋值
var routerdo = function(req,res){
  //method->req.method
  //基于method控制restful
  var router = res.config.router;
  var hz = path.extname(req.url);
  var method = req.method.toLocaleLowerCase();
  res.method = method;
  res.url = req.urlinfo.pathname;
  var url= res.url;
  if('get'==method  || 'head'==method){
    if(hz!='' && !router[url+'_get']){res.sendfile(url);}
    else{check('get',url,req,res)};
  };
  if('post'==method){check('post',url,req,res);};
  if('put'==method){check('put',url,req,res);};
  if('delete'==method){check('delete',url,req,res);};
};


//辅助函数，路由表没有的话404
function check (key,url,req,res){
  var router = res.config.router;
  //全字段匹配
  if(router[url+'_'+key]){router[url+'_'+key](req,res)}
  else{
    //回朔的两个URL处理
    //判断是否有回朔
    if('/'!=url.substr(-1)){
      var urlarr = decode(url);
      url = urlarr[1]+'/*';
      req.urlacc = urlarr[2];
      if(router[url+'_'+key]){router[url+'_'+key](req,res)}
      else{notfind(req,res);};
    }
    else{notfind(req,res);};
  };
};

//404
function notfind (req,res){
  var router = res.config.router;
  router['/404_get'](req,res);
  res.end();
};

//decodeurl回溯判断
function decode (url){
  return url.match(/(.*)\/(.*)$/i);
};

exports = module.exports = routerdo;
