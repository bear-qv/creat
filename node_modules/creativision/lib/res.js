var fs = require('fs');
var path = require('path');
var cookiedo = require('./cookie');
var mimedo = require('./mime');
var sessiondo = require('./session');
var util = require('util');

//res解析处理器
var resdo = function(res){
  //status
  res.status = function(n){this.statusCode = n;};
  //redirect
  res.redirect = function(url){res.writeHead(302, {'Location': url});res.end();};
  //send
  res.send = function(str){res.end(str);};
  //json
  res.json = function(arr){this.set('Content-Type', 'application/json');res.end(JSON.stringify(arr));};
  //cookie
  res.cookie = function(v,path,emp,httponly){
    var path = path || '/';
    var emp = emp || res.config.emp;
    var httponly = httponly || res.config.httponly;
    //v,path,emp,httponly
    var v = cookiedo(v,path,emp,httponly);
    res.setHeader("Set-Cookie", v);
  };
  //sendfile
  res.sendfile = function(filepath){
    //重建路径->public
    filepath = path.join(res.config.basedir,res.config.publicdir,filepath);
    res.stream(filepath);
  };
  //stream流的处理方法
  res.stream = function(filepath,config){
    //判断文件是否存在
    if(fs.existsSync(filepath)){
      //获取初始信息
      var stat = fs.statSync(filepath);
      var mime = mimedo(filepath);
      var tag = JSON.stringify([stat['mtime'],stat['size']]);
      res.setHeader("ETag",tag);
      res.setHeader("Last-Modified",stat['mtime']);
      //基于修改时间 - 文件大小的KEY
      if(!res.config.cache_key[filepath] || res.config.cache_key[filepath]!=tag){
        var status = 200;
        res.writeHead(status, {'Content-Type': mime});
        if(stat['size']<res.config.sizelimit){res.config.cache_key[filepath]=tag;};
        
        //readstream
          var readstream = fs.createReadStream(filepath,{encoding:'binary'});
          var file = '';
          readstream.on('data', function(chunk) {
              if(stat['size']<res.config.sizelimit){file += chunk;}
              res.write(chunk,'binary');
          });
          readstream.on('error',function(){
              res.end();
          });
          readstream.on('close',function(){
          });
          readstream.on('end', function() {
              if(stat['size']<res.config.sizelimit){res.config.cache[filepath]=file;};
              res.end();
          });
        //end
      }else{
        if(res.head['if-none-match'] && res.head['if-none-match']==tag){var status =304;}
        else{var status = 200}
        res.writeHead(status, {'Content-Type': mime});
        if(status == 200){res.write(res.config.cache[filepath],"binary");}
        res.end();
      };
    }else{
      res.writeHead(500, {'Content-Type': 'text/plain'});
      res.end();
    };
  };
  //res.render
  res.render = res.config.render;
  //cookies清除
  res.clearCookie = function(name){
    var path = path || '/';
    var httponly = httponly || res.config.httponly;
    var v = cookiedo(name,path,'-100000',httponly);
    res.setHeader("Set-Cookie", v);
  };
  //session回写
  res.endself = res.end;
  res.end = function(){
    logbash(res);
    if(res._req){sessiondo.set(res.sdir,res._req.cookie['cookiesid'],res._req.session)}
    res.endself.apply(res,arguments);
  };

  //head方法
  res.writeself = res.write;
  res.write = function(){
    if(res.method != 'head'){res.writeself.apply(res,arguments);};
  };
  //TAGS
  res.setHeader("server","nodejs");
  res.setHeader("X-Powered-By","Creativision");
  res.setHeader("Frame-Author","Miguel Valentine");
  res.render._res = res;
  return res;
};

function logbash(res){
  var timex = Date.now() - res.config.sttime;
  var mt  = util.format(styles.green[0]+styles.clean,res.method);
  var st  = util.format(styles.grey[0] +styles.clean,res.statusCode);
  var url = util.format(styles.white[0]+styles.clean,res.url);
  console.log(mt+' '+st+' '+url+' '+timex+'ms');
}

//log渲染配置
var styles = {
    'bold'          : ['\x1B[1m',  '\x1B[22m'],
    'italic'        : ['\x1B[3m',  '\x1B[23m'],
    'underline'     : ['\x1B[4m',  '\x1B[24m'],
    'inverse'       : ['\x1B[7m',  '\x1B[27m'],
    'strikethrough' : ['\x1B[9m',  '\x1B[29m'],
    'white'         : ['\x1B[37m', '\x1B[39m'],
    'grey'          : ['\x1B[90m', '\x1B[39m'],
    'black'         : ['\x1B[30m', '\x1B[39m'],
    'blue'          : ['\x1B[34m', '\x1B[39m'],
    'cyan'          : ['\x1B[36m', '\x1B[39m'],
    'green'         : ['\x1B[32m', '\x1B[39m'],
    'magenta'       : ['\x1B[35m', '\x1B[39m'],
    'red'           : ['\x1B[31m', '\x1B[39m'],
    'yellow'        : ['\x1B[33m', '\x1B[39m'],
    'clean'         : '%s\x1B[0m'
};

exports = module.exports = resdo;