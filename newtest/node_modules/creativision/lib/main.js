var http = require('http');
var cluster = require('cluster');
var loopdo = require('./loop');
var mix = require('./mix')
var numCPUs = require('os').cpus().length;
var creat = exports = module.exports = {};
var path = require('path');

creat.init = function(){
  //初始化配置数组
  this.settings = {};
  this.cache = {};
  this.cache_key = {};
  this.render={};
  //执行默认配置
  this.config();
};

creat.config = function(){
  //默认端口
  this.set('port','80');
  //是否缓存静态文件
  this.set('cache',true);
  //静态文件缓存大小
  this.set('limitsize',10485760);
  //默认核心数
  this.set('core','m');
  //7x24小时
  this.set('autorestart',true);
  //cookie-emp
  this.set('cookie-emp','');
  //cookie-httponly
  this.set('cookie-httponly',true);
  //session回收周期
  this.set('session-back',false)
  //filebuffermax//1M
  this.set('filemax',1024*1024)
};

creat.set = function(setting, val){
  if (1 == arguments.length) {
    return this.settings[setting];
  } else {
    this.settings[setting] = val;
  }
};

creat.get = function(val){
  return this.set(val);
};

creat.listen = function(){
  var server = http.createServer(this);
  return server.listen.apply(server, arguments);
};

//多核启动
creat.mlisten = function(){
  if(cluster.isMaster){
    console.log("服务启动...");
  for (var i = 0; i < numCPUs; i++) {
    cluster.fork();
  }
  cluster.on('listening',function(worker,address){
    console.log('核心 '+i+' 启动 -pid:'+ worker.process.pid);
  });
  cluster.on('exit', function(worker, code, signal) {
    console.log('核心'+i+' pid:'+ worker.process.pid+' 重启')
    //防止无限重启耗尽资源
    setTimeout(function() {cluster.fork();},2000);
  });
  }else{
    //这里的全局作用域必须是this
    this.listen.apply(this,arguments);
    //session回收机
    this.sessionback();
  }
};

creat.start = function(port){
  if(this.get('core')=='s'){this.listen(port)};
  if(this.get('core')=='m'){this.mlisten(port)};
};

creat.renderset = function(name,pathx){
  pathx = path.join(this.settings['dirbase'],pathx);
  var render = require(pathx);
  this.render[name] = render;
};

creat.sessionback = function(){
  var emptime = this.get('cookie-emp');
  var droptime = this.get('session-back');
  if(IsNum(droptime) && emptime!=''){
    var sdir = path.join(this.settings['dirbase'],this.settings['session'])
    var session = require(sdir);
    setInterval(function() {
      //注册回收事件
      session.check(emptime);
    }, droptime);
  };
};

//访问时执行的函数
//核心控制器->loop.js
creat.loop = function(req,res){
  res.config = {
    //此处开始计算时间
    sttime   :Date.now(),
    //项目主目录
    basedir  :this.settings['dirbase'],
    //静态文件目录
    publicdir:this.settings['static'],
    //视图目录
    viewdir  :this.settings['viewdir'],
    //cookie过期时间
    emp      :this.settings['cookie-emp'],
    //cookies httponly是否启用
    httponly :this.settings['cookie-httponly'],
    //单个静态文件缓存大小上限
    sizelimit:this.settings['limitsize'],
    //session api
    sess     :this.settings['session'],
    //router api
    router   :this.settings['router'],
    //缓存池
    cache    :this.cache,
    //缓存钥匙
    cache_key:this.cache_key,
    //render
    render   :this.render
  }
  loopdo(req,res);
}

//辅助函数
function IsNum(s)
{
    if (s!=null && s!="")
    {
        return !isNaN(s);
    }
    return false;
}